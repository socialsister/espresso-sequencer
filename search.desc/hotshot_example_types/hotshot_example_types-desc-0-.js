searchState.loadedDescShard("hotshot_example_types", 0, "block types\nnode types\nImplementations for testing/examples Implementations for …\nstorage types for hotshot storage\nadd a delay to async functions\nA <code>BlockHeader</code> that commits to <code>TestBlockPayload</code>.\nA <code>BlockPayload</code> that contains a list of <code>TestTransaction</code>.\nThe transaction in a <code>TestBlockPayload</code>.\nBlock number.\nFast commitment for builder verification\nGet reference to raw bytes of transaction\nEncode a list of transactions into bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a genesis block payload with bytes <code>vec![0]</code>, to be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert transaction to raw vector of bytes\nblock metadata\nConstruct a new transaction\nVID commitment to the payload.\nrandom\nTimestamp when this header was created.\nTimestamp when this header was created.\nList of transactions.\nConstruct a new transaction. Returns <code>None</code> if <code>bytes.len()</code> &gt; …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nCombined Network implementation (libp2p + web server)\nLibp2p network implementation\nMemory network implementation\nThe Push CDN implementation\nProvides parameters to use the RandomOverlapQuorumIterator\nProvides parameters to use the StableQuorumIterator\nstatic committee type alias\nfiller struct to implement node type and allow us to …\nfiller struct to implement node type and allow us to …\nfiller struct to implement node type and allow us to …\nfiller struct to implement node type and allow us to …\nfiller struct to implement node type and allow us to …\nWeb server network implementation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstance-level state implementation for testing purposes.\nApplication-specific state delta implementation for …\nValidated state implementation for testing purposes.\nthe block height\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthe previous state commitment\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>should_return_err</code> is a testing utility to validate …\nSettings for each type\nWhat type of delay we want to apply to\nConfig for each supported type\nCurrent implementations that are supported for testing …\nIterator to iterate over enum\nImplement this method to add some delay to async call\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd a delay from settings\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLook for settings in the config and run it")