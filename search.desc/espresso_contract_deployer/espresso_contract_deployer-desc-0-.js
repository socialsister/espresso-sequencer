searchState.loadedDescShard("espresso_contract_deployer", 0, "An identifier for a particular contract.\nCache of contracts predeployed or deployed during this …\nSet of predeployed contracts.\nType alias that connects to providers with recommended …\n<code>stateHistoryRetentionPeriod</code> in LightClient.sol as the …\na handy thin wrapper around wallet builder and provider …\nsimilar to <code>build_provider()</code> but using a random wallet\nbuilder pattern for\nDeploy a contract (with logging and cached deployments)\nThe primary logic for deploying and initializing an …\nDefault deployment function <code>LightClient.sol</code> or …\nThe primary logic for deploying and initializing an …\nDeploy and initialize the Ops Timelock contract\nDeploy and initialize the Safe Exit Timelock contract\nThe primary logic for deploying and initializing an …\nThe primary logic for deploying and initializing an …\nEncode a function call with the given signature and …\nUse an already-deployed EspToken.sol instead of deploying …\nUse an already-deployed EspToken.sol proxy instead of …\nUse an already-deployed EspTokenV2.sol instead of …\nUse an already-deployed FeeContract.sol instead of …\nUse an already-deployed FeeContract.sol proxy instead of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nhelper function to decide if the contract at given address …\nUse an already-deployed LightClient.sol instead of …\nUse an already-deployed LightClient.sol proxy instead of …\nLightClientV2.sol\nFetching hotshot network config\nOpsTimelock.sol\nUse an already-deployed PlonkVerifier.sol instead of …\nPlonkVerifierV2.sol\nSafeExitTimelock.sol\nUse an already-deployed StakeTable.sol instead of …\nUse an already-deployed StakeTable.sol proxy instead of …\nUse an already-deployed StakeTableV2.sol instead of …\nCommon logic for any Ownable contract to transfer ownership\n<code>ToString::to_string</code>, but without panic on OOM.\nUpgrade the esp token proxy to use EspTokenV2.\nUpgrade the light client proxy to use LightClientV2. …\nUpgrade the stake table proxy to use StakeTableV2.\nWrite a .env file.\nConvenient handler that builds all the input arguments …\nBuilder for <code>DeployerArgs</code>.\nError type for DeployerArgsBuilder\nUninitialized field\nCustom validation error\nBuilds a new <code>DeployerArgs</code>.\nCreate an empty builder, with all fields set to <code>None</code> or …\ndeploy target contracts\nDeploy all contracts\nDeploy all contracts up to and including stake table v1\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParameters:\nPropose ownership transfer from multisig to timelock\n<code>ToString::to_string</code>, but without panic on OOM.\nGet the epoch-related  from the sequencer’s …\nFetch the stake table from a sequencer node given the …\nReturns both genesis light client state and stake table …\nderive the genesis light client state and stake table …\nParameters for upgrading LightClient to V2\nCall the transfer ownership script to transfer ownership …\nCall the upgrade proxy script to upgrade a proxy contract\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpgrade the EspToken proxy to use EspTokenV2. Internally, …\nUpgrade the light client proxy to use LightClientV2. …\nUpgrade the stake table proxy to use StakeTableV2. …\nVerify the node js files are present and can be executed.\nEnum representing different types of timelock contracts\nData structure for timelock operations\nTypes of timelock operations\nCancel a timelock operation\nThe data to send with the call e.g. the calldata of a …\nThe delay for the operation, must be &gt;= the timelock’s …\nExecute a timelock operation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe predecessor operation id if you need to chain …\nThe salt for the operation\nSchedule a timelock operation\nThe address of the contract to call\nThe value to send with the call\nTry to obtain a ledger signer")